/*
 * Filtro.cpp
 *
 *  Created on: 31 mar. 2017
 *      Author: jsa
 */



#ifndef INCLUDES
#define INCLUDES

#include <iostream>
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/videoio.hpp"
#include <ctime>
#include <opencv2/video/background_segm.hpp>
#include <opencv2/bgsegm.hpp>
#endif



#include "FiltroParticulas.h"


#define D_TYPE CV_32F


using namespace cv;
using namespace std;

int main(int argc, char** argv) {

	/*char* imageName = argv[1];
	cout<<argv[1];
	//Mat c =Mat::zeros(800,600,CV_32FC1);
	Mat c = imread(imageName,1);

	namedWindow(  argv[1], CV_WINDOW_AUTOSIZE );
	imshow( argv[1], c );
	waitKey(0);

	if( !c.data )
	 {
	   printf( " No image data \n " );
	   return -1;
	 }*/

	cv::VideoCapture cap =cv::VideoCapture(argv[1]);


	int ex = static_cast<int>(cap.get(CV_CAP_PROP_FOURCC));

	Size S = Size((int) cap.get(CV_CAP_PROP_FRAME_WIDTH),
						  (int) cap.get(CV_CAP_PROP_FRAME_HEIGHT));

	VideoWriter outputVideo;
	outputVideo.open(argv[2], ex, 30, S, true);

	VideoWriter outputMask;
	outputMask.open(argv[3], ex, 30, S, true);

	if (!outputVideo.isOpened())
		{
			cout  << "No se puede salvar vÃ­deo: " << argv[2] << endl;
			return -1;
		}

	Mat frame,gray_image;
	cap>>frame;
	Mat mascolor;
	Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
	Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
	pMOG2 = cv::bgsegm::createBackgroundSubtractorMOG(); //MOG2 approach
	pMOG2.dynamicCast<cv::bgsegm::BackgroundSubtractorMOG>()->setHistory(5);

	cvtColor( frame, gray_image, CV_BGR2GRAY );
	FiltroParticulas a = FiltroParticulas(100,gray_image);
	a.GenerarParticulas(gray_image);
	while (true){

		pMOG2->apply(frame,fgMaskMOG2,0.3);
		if(fgMaskMOG2.data){
			a.CalcularPesos(fgMaskMOG2);
			a.SeleccionarParticulas();
			a.PerturbarParticulas(fgMaskMOG2);
		}
		a.PintarResultado(frame);
		cvtColor(fgMaskMOG2, mascolor, CV_GRAY2BGR);
		outputMask<<mascolor;
		outputVideo<<frame;

		cap>>frame;
		if (frame.empty()) break;
	}

}
